package com.protech.nvkids.pages.ptre;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindAll;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.FindBys;
import org.openqa.selenium.support.PageFactory;

import com.protech.selenium.api.base.SeleniumBase;

import utils.CommonLocators;

public class ViewProcessDetails extends SeleniumBase

{
	CommonLocators cloc = new CommonLocators();
	public ViewProcessDetails() 
	{
		PageFactory.initElements(driver, this);
	}

	@FindBy(xpath = "//span[@title='Quick Navigation']") WebElement eleQuickNavigation;
	@FindBy(xpath = "(//input[@type='text'])[2]") WebElement eletxtQuickNavigationText;

	//Screen functions Navigation
	@FindBy(xpath="//span[ text()='Task Details']") public WebElement eleTaskDetails;


	// Grid Column

	@FindBy(xpath="//label[ text()=' Process ID ']") public WebElement eleProcessID;
	@FindBy(xpath="//label[ text()=' Process ']") public WebElement eleProcess;
	@FindBy(xpath="//label[ text()=' Category ']") public WebElement eleCategory;
	@FindBy(xpath="//label[ text()=' Manual Start ']") public WebElement eleManualStart;
	@FindBy(xpath="//label[ text()=' Updated On ']") public WebElement eleUpdatedOn;
	@FindBy(xpath="//label[ text()=' Updated By ']") public WebElement eleUpdatedBy;
	@FindBy(xpath="//span[@title='Grid Options']") public WebElement eleGridOptions;
	@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div[contains(@class,'filterItems')]") }) public List <WebElement> eleGridOptionsPanel;
	@FindBy(xpath="(//div[@class='ui-overlaypanel-content']/div/child::p-checkbox)[1]") public WebElement eleShowFilter;
	@FindBy(xpath="//span[text()='Show Columns ']") public WebElement eleShowColumn;
	@FindBy(xpath="//span[text()='Download File']") public WebElement eleDownloadFile;

	@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div/child::p-checkbox//child::label") }) public List <WebElement> eleShowColumOptions;
	@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div[@class='filterItems']") }) public List <WebElement> eleDownloadFileOptions;









	// Select Filters - fields
	@FindBy(xpath="//input[@id='processCode']") public WebElement eleFltrProcessID;
	@FindBy(xpath="//input[@id='processCode']/following::button") public WebElement eleFltrProcessLOV;
	@FindBy(xpath="//tbody[@class='ui-table-tbody']") public WebElement eleLOVTable;

	//div[@class='ui-inputgroup']

	//Error Panel
	@FindBy(xpath="//div[@class='messagetextrow'][2]/span") WebElement eleErrorPanel;


	public ViewProcessDetails quickNavigation_PTREagain() throws IOException
	{
		clickIcon(eleQuickNavigation, eleQuickNavigation);
		clearAndType(eletxtQuickNavigationText, "PTRE");
		pressEnterKey(eletxtQuickNavigationText);
		return  this;
	}

	public void openFilter(){
		clickIcon(cloc.eleFilter, cloc.eleFilter);

	}

	public ViewProcessDetails enterProcessID(String data){
		clearAndType(eleFltrProcessID, data);
		return this;
	}

	public ViewProcessDetails clickSearch(){
		clickIcon(cloc.eleSearch,cloc.eleSearch);
		return this;
	}

	public void  clickClear(){
		clickIcon(cloc.eleClear, cloc.eleClear);

	}
	public ViewProcessDetails viewStatusBar(String expectedText){
		verifyExactText(cloc.eleStatusBar, expectedText);
		return this;

	}
	//Need to check this method (WIP)
	public void selectValueFromGrid(String val){
		WebElement cell = null;
		List<WebElement> rows = eleLOVTable.findElements(By.tagName("tr"));
		outerloop:
			for(WebElement row : rows){
				List<WebElement> Columns = row.findElements(By.tagName("td"));
				int ColSize = Columns.size();
				for(WebElement col: Columns){
					if(col.getText().equals(val)){
						cell = col;
						break outerloop;
					}
					else if(col.getSize() == col){
						break;
					}
					else{
						continue;
					}
				}
			}

		String actual = cell.getText();
		try{

			if(actual.equals(val)){
				doDoubleClick(cell);
				reportStep("The actual record " +actual + " is selected" , "pass");
				log.info("The actual record " +actual + " is selected" );
			}

			else
			{
				reportStep("Unable to find the record" , "fail");
				log.info("Unable to find the record" );
				Assert.fail();

			}
		}

		catch (Exception e) 
		{
			e.printStackTrace();
			reportStep("Unable to locate the record", "fail");
			log.info("Unable to locate the record");
			Assert.fail();
		}

	}

	// Grid sel selection:

	public void verifyInquiredGridResult(String data) {
		try 
		{
			WebElement exp;

			List<WebElement> rows = driver.findElementByXPath("//tr[@class='ng-star-inserted']/following::tbody").findElements(By.tagName("tr"));
			outerloop:
				for (WebElement row : rows){

					List<WebElement> cells = row.findElements(By.tagName("td"));

					for(WebElement cell : cells){

						String actualValue = cell.getText();
						if(actualValue.equals(data)){

							exp = cell;
							//doDoubleClick(cell);
							reportStep(actualValue + "Record  is available", "pass");
							log.info(actualValue + " Record  is available");
							break outerloop;
						}
						else if((rows.get(rows.size()-1)).equals(row)){
							reportStep(actualValue + "Record  is not available", "fail");
							log.info(actualValue + " Record not  is available");
							break outerloop;
						}
						else {
							continue;
						}
					}
				}
		}

		catch (Exception e) 
		{
			int position = e.toString().indexOf("Exception:");
			String error = e.toString().substring(0, position + 10);
			reportStep("Unable find the record --> " + error, "fail");
			log.error("Unable to fid the record  --> " + error);
			System.err.println("Unable to find headers");
			throw new RuntimeException();
		}
		finally 
		{
			takeSnap();
		}
	}



	public void verifyGridOptions(String...data) {
		try 
		{
			ArrayList<String> GridOptions = new ArrayList<String>();
			ArrayList<String> expec = new ArrayList<String>();
			List<WebElement> GridValues = eleGridOptionsPanel;
			for (WebElement col : GridValues){
				if(col.getText().contains("Download") == true ){
					break;
				}
				else{
					GridOptions.add(col.getText().trim());
					//System.out.println(col.findElement(By.tagName("label")).getText());
				}

				/*for(String exp : data ){
					expec.add(exp.trim());
					//System.out.println(exp);
				}*/

				if (data.equals(GridOptions)) 
				{
					log.info("Grid Options present");
					for(String display : data){
						System.out.println(display);
						reportStep("Grid Options "+ display  +" is present", "pass");
					}


				}
				else{

					log.info("Grid Options is not present");
					reportStep("Grid Options is not present", "fail");
				}
			}
		}
		catch (Exception e) 
		{
			int position = e.toString().indexOf("Exception:");
			String error = e.toString().substring(0, position + 10);
			reportStep("Unable find grid options --> " + error, "fail");
			log.error("Unable to find grid options --> " + error);
			System.err.println("Unable to find grid options");
			throw new RuntimeException();
		}
		finally 
		{
			takeSnap();
		}

	}




}

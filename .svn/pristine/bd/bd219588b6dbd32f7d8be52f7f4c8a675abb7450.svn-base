package com.protech.nvkids.testcases.ptre;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindAll;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.annotations.Test;

import com.protech.nvkids.pages.login.LoginPage;
import com.protech.nvkids.pages.ptre.EditProcessDetails;
import com.protech.nvkids.pages.ptre.ViewProcessDetails;
import com.protech.selenium.api.base.SeleniumBase;

import utils.CommonLocators;

public class ViewTaskDetails extends SeleniumBase{

	CommonLocators  cloc = new CommonLocators();

	@Test(priority=1,description="NavigateToViewProcessDetails and Verify the fields in View Task Details screen")
	public void VerifyScreenFields() throws Exception
	{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		verifyDisplayed(cloc.eleicnFilter,cloc.eleicnFilter);
		verifyGridHeaders(" Task ID "," Task "," No. of Days to Complete "," Task Type "," Updated On "," Updated By ");
		verifyAssociatedScreens("Maintain Process","Case Processor");

	}

	@Test(priority=3,description="Undock Filter Section and verify fields")
	public void VerifySelectFilters() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		Task.verifyDisplayed(cloc.eleicnSearch,cloc.eleicnSearch);
		Task.verifyDisplayed(cloc.eleicnClear,cloc.eleicnClear);
		Task.verifyDisplayed(Task.eleFltrTask,Task.eleFltrTask);
	}
	@Test(priority=4,description="Verify field size allowance in TASK LOV field")
	public void VerifySizeAllowanceinTask() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		verifyFieldLength(Task.eleFltrTask, "ADASFSADFSDFAS", 5);

	}

	@Test(priority=5,description="Verify alpha characters allowance in TASK LOV field")
	public void VerifyAlphaCharAllowanceinTask() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		VerifyChar_allowance(Task.eleFltrTask, "AGDDC");
	}


	@Test(priority=6,description="Verify numeric characters allowance in TASK LOV field")
	public void VerifyNumericCharAllowanceinTask() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		VerifyChar_allowance(Task.eleFltrTask, "12345");
	}

	@Test(priority=7,description="Verify Special characters allowance in TASK LOV field")
	public void VerifySpecialCharAllowanceinTask() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		VerifyChar_NotAllowance(Task.eleFltrTask, "@#^$%");
	}

	@Test(priority=8,description="Inquire with InvalidValue in TASK ID field")
	public void InquireInvalidValueinTask() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		setFocus(Task.eleFltrTask);
		Task.enterTask("abcd");
		clickIcon(cloc.eleicnSearch, cloc.eleicnSearch);
		verifyExactText(cloc.eleStatusBar, "Task ID :  Invalid Task Code");
		verifyBorderColor(Task.eleFltrTask);

	}
	

	@Test(priority=10,description="VerifyClearIcon in SelectFilters")
	public void VerifyClearValueinFilter() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		Task.enterTask("AGDC");
		Task.clickClear();
		verifyFieldIsEmpty(Task.eleFltrTask);

	}

	@Test(priority=10,description="VerifyClearIcon in SelectFilters")
	public void InquireValidValue() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		Task.openFilter();
		Task.enterTask("ADCAP");
		Task.clickSearch();
		Thread.sleep(3000);
		verifyInquiredGridResult("ADCAP");


	}

	@Test(priority=10,description="Verify Grid Options")
	public void VerifyGridOptions() throws Exception{

		com.protech.nvkids.pages.ptre.ViewTaskDetails Task = new LoginPage().login().quickNavigation_PTRE().navigateToViewTaskDetails();
		clickIcon(Task.eleGridOptions, Task.eleGridOptions);
		Task.verifyGridOptions("Show Columns","Expand All","Download File");
	}







}

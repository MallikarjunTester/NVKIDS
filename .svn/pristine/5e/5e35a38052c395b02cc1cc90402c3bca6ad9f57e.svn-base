package com.protech.nvkids.pages.bstl;


import java.util.List;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import com.protech.selenium.api.base.SeleniumBase;

public class PrintQueueErrorsPage extends SeleniumBase {
	
	public PrintQueueErrorsPage() {
		PageFactory.initElements(driver, this);
	}
	
	   //Filter Section
		@FindBy(xpath="//span[text()='Batch Status Logs and Errors']") WebElement elelnkBSTL_batchstatuslogs;		
		@FindBy(id="effectiveRunDate") WebElement eledtPocessDate;
		@FindBy(id="caseid") WebElement eletxtCaseID;
		@FindBy(id="noticeid") WebElement eletxtNoticeID;
		@FindBy(xpath="//span[text()='Search']") WebElement elebtnSearch;
		@FindBy(xpath="//span[text()='Clear']") WebElement elebtnClear;
		
		//Grid Section
		@FindBy(xpath="//span[text()=' Process Date ']") WebElement elehdrProcessDate;
		@FindBy(xpath="//span[text()=' Job ID ']") WebElement elehdrJobID;
		@FindBy(xpath="//span[text()=' Job Description ']") WebElement elehdrJobDescription;
		@FindBy(xpath="//span[text()=' Batch Name ']") WebElement elehdrBatchName;
		@FindBy(xpath="//span[text()=' Message Type ']") WebElement elehdrMessageType;
		@FindBy(xpath="//span[text()=' Create Date ']") WebElement elehdrCreateDate;
		
		//Grid Accordion section
		@FindBy(xpath="//label[text()=' Key Values']") WebElement eledispKeyValues;
		@FindBy(xpath="//label[text()=' Error Description ']") WebElement eledispErrorDescription;
	
		@FindBy(xpath = "//span[text()='Batch Errors']")
		WebElement eleBatchErrors;

		@FindBy(xpath = "//span[text()='Batch Status Logs']")
		WebElement eleBatchStatusLogs;
		
		
		@FindBy(xpath="//div[@class='messagetextrow'][2]/span") WebElement eleErrorPanel;
		
		public void MakeWebElementsLis()
		{
			List<WebElement> list = null ;
			
			list.add(elehdrProcessDate);
			list.add(elehdrJobID);
			list.add(elehdrJobDescription);
			list.add(elehdrBatchName);
			list.add(elehdrMessageType);
			list.add(elehdrCreateDate);
			
			list.add(eledispKeyValues);
			list.add(elehdrCreateDate);
		}
		
		public PrintQueueErrorsPage VerifyFieldspresent() throws Exception{
			
			verifyDisplayed(elehdrProcessDate);
			verifyDisplayed(elehdrJobID);
			verifyDisplayed(elebtnSearch);
			verifyDisplayed(elebtnClear);
			verifyDisplayed(elebtnClear);
			
			
			verifyDisplayed(elehdrProcessDate);
			verifyDisplayed(elehdrJobID);
			verifyDisplayed(elehdrJobDescription);
			verifyDisplayed(elehdrBatchName);
			verifyDisplayed(elehdrMessageType);
			verifyDisplayed(elehdrCreateDate);
			
			verifyDisplayed(eledispKeyValues);
			verifyDisplayed(eledispErrorDescription);
		
			
			
			return this;
			
		}
		
		
		
		public PrintQueueErrorsPage VerifyError_NullProcessDate()
		{
			
			clear(elehdrProcessDate);
			click(elebtnSearch);
			
			verifyPartialText(eleErrorPanel, "ENTER REQUIRED FIELDS");
				
			return this;
		}
		
		
		
		public PrintQueueErrorsPage  VerifyInvalidProcessDate()
		{
			clearAndType(elehdrProcessDate, "321321");
			click(elebtnSearch);		
			verifyPartialText(eleErrorPanel, "INVALID VALUE");
			return this;
			
		}
		
		public PrintQueueErrorsPage VerifywithInvalidCaseID()
		{
			clearAndType(eletxtCaseID, "321321");
			click(elebtnSearch);		
			verifyPartialText(eleErrorPanel, "INVALID VALUE");
				
			return this;
		}
		
		public PrintQueueErrorsPage VerifyInvalidNoticeID()
		{
			clearAndType(eletxtNoticeID, "321321");
			click(elebtnSearch);		
			verifyPartialText(eleErrorPanel, "INVALID VALUE");
				
			return this;
		}
		
		
	
		
		public PrintQueueErrorsPage VerifyFutureProcessdate()
		{
			
			clearAndType(elehdrProcessDate, "321321");
			click(elebtnSearch);		
			verifyPartialText(eleErrorPanel, "FUTURE DATE NOT ALLOWED");
			return this;		
			
		}
		
		public PrintQueueErrorsPage VerifyNoMatchRecords()
		{
			
			clearAndType(elehdrProcessDate, "321321");
			click(elebtnSearch);		
			verifyPartialText(eleErrorPanel, "NO MATCHING RECORDS");
			return this;	
			
		}
		
		public PrintQueueErrorsPage VerifySucessfulInquiry()
		{
			
			clearAndType(elehdrProcessDate, "321321");
			click(elebtnSearch);		
			verifyPartialText(eleErrorPanel, "Done");
			return this;	
			
		}
		
		
		public BatchStatusLogsPage navigatetoBatchStatusLogs() throws InterruptedException {

			clickLink(eleBatchStatusLogs);
			Thread.sleep(3000);

			return new BatchStatusLogsPage();

		}
		
		public BatchErrorsPage navigatetoBatchErrors() throws InterruptedException {

			clickLink(eleBatchErrors);
			Thread.sleep(3000);

			return new BatchErrorsPage();

		}


}

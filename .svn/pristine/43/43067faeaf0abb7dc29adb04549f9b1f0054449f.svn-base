package com.protech.nvkids.pages.ptre;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindAll;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import com.protech.selenium.api.base.SeleniumBase;

import utils.CommonLocators;

public class ViewTaskDetails extends SeleniumBase
{
	CommonLocators cloc = new CommonLocators();
	public ViewTaskDetails() 
	{
		PageFactory.initElements(driver, this);
	}

	@FindBy(xpath = "//span[@title='Quick Navigation']") WebElement eleQuickNavigation;
	@FindBy(xpath = "(//input[@type='text'])[2]") WebElement eletxtQuickNavigationText;

	//Screen functions Navigation
	@FindBy(xpath="//span[ text()='Task Details']") public WebElement eleProcessDetails;
	@FindBy(xpath="") public WebElement eleEditProcessDetails;


	// Grid Column
	@FindBy(xpath="//span[@title='Grid Options']") public WebElement eleGridOptions;
	//@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div[contains(@class,'filterItems')]") }) public List <WebElement> eleGridOptionsPanel;
	@FindBy(xpath="(//div[@class='ui-overlaypanel-content']/div/child::p-checkbox)[1]") public WebElement eleShowFilter;
	@FindBy(xpath="(//tr/td[@class='text-center ng-star-inserted'])[1]/descendant::i") public WebElement eleExpandCollapse;
	
	
	@FindBy(xpath="//span[text()='Show Columns ']") public WebElement eleShowColumn;
	@FindBy(xpath="//span[text()='Download File']") public WebElement eleDownloadFile;

	@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div/child::p-checkbox//child::label") }) public List <WebElement> eleShowColumOptions;
	@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div[@class='filterItems']") }) public List <WebElement> eleDownloadFileOptions;

	@FindAll(value = { @FindBy(xpath="//div[@class='ui-overlaypanel-content']/div[contains(@class,'filterItems')]") }) public List <WebElement> eleGridOptionsPanel;

	// Select Filters - fields
	@FindBy(xpath="//input[@id='taskCode']") public WebElement eleFltrTask;
	@FindBy(xpath="//span[text()='ui-btn']") public WebElement eleFltrTaskLOV;
	@FindBy(xpath="") public WebElement eleLOVTable;
	@FindBy(xpath="//a[contains(@class,'selectFilter')]") public WebElement eleFilterIcn;
	
	

	//Status Bar:
	@FindBy(xpath="//div[contains(@class,'errorContainer')]/div") public WebElement eleTasStatusBar;
	@FindBy(xpath="//div[contains(@class,'errorContainer')]/span[text()=' Done']") public WebElement eleTaskBarDone;



	public ViewTaskDetails quickNavigation_PTREagain() throws IOException
	{
		clickIcon(eleQuickNavigation, eleQuickNavigation);
		clearAndType(eletxtQuickNavigationText,eletxtQuickNavigationText, "PTRE");
		pressEnterKey(eletxtQuickNavigationText);
		return  this;
	}



	public void openFilter(){
		click(cloc.eleicnFilter);
	}

	public ViewTaskDetails enterTask(String data){
		clearAndType(eleFltrTask,eleFltrTask, data);
		return this;
	}

	public ViewTaskDetails clickSearch(){
		click(cloc.eleicnSearch);
		return this;
	}

	public void  clickClear(){
		click(cloc.eleicnClear);

	}
	public ViewTaskDetails viewStatusBar(String expectedText){
		verifyExactText(cloc.eleStatusBar, expectedText);
		return this;

	}


	public void verifyGridOptions(String...data) {
		try 
		{
			ArrayList<String> GridOptions = new ArrayList<String>();
			ArrayList<String> expec = new ArrayList<String>();
			List<WebElement> GridValues = eleGridOptionsPanel;
			for (WebElement col : GridValues){
				if(col.getText().contains("Download") == true ){
					break;
				}
				else{
					GridOptions.add(col.getText().trim());
					//System.out.println(col.findElement(By.tagName("label")).getText());
				}

				/*for(String exp : data ){
					expec.add(exp.trim());
					//System.out.println(exp);
				}*/

				if (data.equals(GridOptions)) 
				{
					log.info("Grid Options present");
					for(String display : data){
						System.out.println(display);
						reportStep("Grid Options "+ display  +" is present", "pass");
					}


				}
				else{

					log.info("Grid Options is not present");
					reportStep("Grid Options is not present", "fail");
				}
			}
		}
		catch (Exception e) 
		{
			int position = e.toString().indexOf("Exception:");
			String error = e.toString().substring(0, position + 10);
			reportStep("Unable find grid options --> " + error, "fail");
			log.error("Unable to find grid options --> " + error);
			System.err.println("Unable to find grid options");
			throw new RuntimeException();
		}
		finally 
		{
			takeSnap();
		}

	}

}
